import { type NextRequest, NextResponse } from "next/server"
import { connectDB } from "@/lib/mongodb"
import User from "@/models/User"
import Certificate from "@/models/Certificate"
import { sendEmail, getCertificateEmailTemplate } from "@/lib/email"
import jwt from "jsonwebtoken"
import QRCode from "qrcode"
import { getCertificateUrl } from "@/lib/url-utils"

const JWT_SECRET = process.env.JWT_SECRET || "fallback-secret"

export async function POST(request: NextRequest) {
  try {
    const authHeader = request.headers.get("authorization")

    if (!authHeader || !authHeader.startsWith("Bearer ")) {
      return NextResponse.json({ error: "Authorization token required" }, { status: 401 })
    }

    const token = authHeader.substring(7)

    try {
      const decoded = jwt.verify(token, JWT_SECRET) as any
      if (decoded.role !== "super_admin") {
        return NextResponse.json({ error: "Admin access required" }, { status: 403 })
      }
    } catch {
      return NextResponse.json({ error: "Invalid or expired token" }, { status: 401 })
    }

    const { userId } = await request.json()

    if (!userId) {
      return NextResponse.json({ error: "User ID is required" }, { status: 400 })
    }

    await connectDB()
    const user = await User.findById(userId)

    if (!user) {
      return NextResponse.json({ error: "User not found" }, { status: 404 })
    }

    // Generate certificate ID
    const certificateId = `CERT_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`

    const verificationUrl = getCertificateUrl(certificateId)

    // Generate QR code data
    const qrData = {
      certificateId,
      name: `${user.title}. ${user.name}`,
      fatherHusbandName: user.fatherHusbandName,
      registrationNumber: user.registrationNumber,
      mobileNo: user.mobileNo,
      emailId: user.emailId,
      dateOfBirth: user.dateOfBirth,
      courseName: user.courseName,
      collegeName: user.collegeName,
      experience: user.experience,
      passoutPercentage: user.passoutPercentage.toString(),
      state: user.state,
      address: user.address,
      issueDate: new Date().toLocaleDateString("en-GB"),
      verificationUrl,
    }

    const qrCodeDataUrl = await QRCode.toDataURL(JSON.stringify(qrData), {
      width: 200,
      margin: 2,
      color: {
        dark: "#000000",
        light: "#FFFFFF",
      },
    })

    const certificate = new Certificate({
      certificateId,
      userId: user._id.toString(),
      qrData,
      qrCodeDataUrl,
      createdAt: new Date(),
    })

    await certificate.save()

    try {
      const emailHtml = getCertificateEmailTemplate(`${user.title}. ${user.name}`, verificationUrl)

      await sendEmail({
        to: user.emailId,
        subject: "Certificate Generated by Admin",
        html: emailHtml,
      })

      console.log(`Admin-generated certificate email sent to ${user.emailId}`)
    } catch (emailError) {
      console.error("Failed to send certificate email:", emailError)
      // Don't fail certificate generation if email fails
    }

    return NextResponse.json({
      success: true,
      certificateId,
      message: "Certificate generated successfully",
      data: {
        certificateId: certificate.certificateId,
        userId: certificate.userId,
        qrData: certificate.qrData,
        createdAt: certificate.createdAt,
        qrCodeDataUrl: certificate.qrCodeDataUrl,
      },
    })
  } catch (error) {
    console.error("Admin certificate generation error:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}
